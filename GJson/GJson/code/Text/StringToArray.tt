<#@ template language="C#" #>
<#@ import namespace="System.Globalization" #>
<#
    (string,string)[] list = new[] {
        (nameof(Int32), $"{nameof(NumberStyles)}.{nameof(NumberStyles.Integer)}"),
        (nameof(Single), $"{nameof(NumberStyles)}.{nameof(NumberStyles.Float)}"),
        (nameof(Int64), $"{nameof(NumberStyles)}.{nameof(NumberStyles.Integer)}"),
        (nameof(Double), $"{nameof(NumberStyles)}.{nameof(NumberStyles.Number)}"),
        (nameof(Int16), $"{nameof(NumberStyles)}.{nameof(NumberStyles.Integer)}"),
        (nameof(UInt16), $"{nameof(NumberStyles)}.{nameof(NumberStyles.Integer)}"),
        (nameof(Byte), $"{nameof(NumberStyles)}.{nameof(NumberStyles.Integer)}"),
        (nameof(SByte), $"{nameof(NumberStyles)}.{nameof(NumberStyles.Integer)}")
    };
#>
// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY gouanlin. DO NOT CHANGE IT.
// </auto-generated>

using System;
using System.Globalization;

namespace Gal.Core {
    /// <summary>
    /// 
    /// </summary>
    /// <para>author gouanlin</para>
    public static class StringToArray {
<#
    foreach (var (item,style) in list) {
#>
        public static void To<#= item #>Array(ReadOnlySpan<char> text, ref RefWriter<<#= item #>> writer, char separator = ';') {
            int i;
            while ((i = text.IndexOf(separator)) != -1) {
                writer.Write(i > 0 ? <#= item #>.Parse(text[..i], <#= style #>, CultureInfo.InvariantCulture) : default);
                text = text[++i..];
            }
            writer.Write(text.Length > 0 ? <#= item #>.Parse(text, <#= style #>, CultureInfo.InvariantCulture) : default);
        }

        public static <#= item #>[] To<#= item #>Array(ReadOnlySpan<char> text, char separator = ';') {
            RefWriter<<#= item #>> writer = new(stackalloc <#= item #>[32]);
            try {
                To<#= item #>Array(text, ref writer, separator);
                return writer.writtenSpan.ToArray();
            } finally {
                writer.Dispose();
            }
        }

        public static void To<#= item #>Array2D(ReadOnlySpan<char> text, IWriter<<#= item #>[]> writer, char separator1d = ';', char separator2d = '|') {
            RefWriter<<#= item #>> writer1d = new(stackalloc <#= item #>[32]);
            try {
                int i;
                while ((i = text.IndexOf(separator2d)) != -1) {
                    if (i > 0) {
                        To<#= item #>Array(text[..i], ref writer1d, separator1d);
                        writer.Write(writer1d.writtenSpan.ToArray());
                    } else {
                        writer.Write(Array.Empty<<#= item #>>());
                    }
                    writer1d.Clear();
                    text = text[++i..];
                }
                if (text.Length > 0) {
                    To<#= item #>Array(text, ref writer1d, separator1d);
                    writer.Write(writer1d.writtenSpan.ToArray());
                } else {
                    writer.Write(Array.Empty<<#= item #>>());
                }
            } finally {
                writer1d.Dispose();
            }
        }

        public static <#= item #>[][] To<#= item #>Array2D(ReadOnlySpan<char> text, char separator1d = ';', char separator2d = '|') {
            using Writer<<#= item #>[]> writer = new(32);
            To<#= item #>Array2D(text, writer, separator1d, separator2d);
            return writer.writtenSpan.ToArray();
        }

<#
    }
#>
    }
}