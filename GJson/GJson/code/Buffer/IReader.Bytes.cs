// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY gouanlin. DO NOT CHANGE IT.
// </auto-generated>

using System;
using System.Buffers.Binary;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace Gal.Core {
    public static class ReaderByteEx {

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static sbyte ReadInt8(this IReader<byte> self) => (sbyte)self.Read();

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static byte ReadUInt8(this IReader<byte> self)  => self.Read();

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static bool ReadBoolean(this IReader<byte> self) => self.ReadUInt8() != 0;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static UInt16 ReadUInt16(this IReader<byte> self){
            var span = self.span;
            var t = (UInt16)(span[0] | (span[1] << 8));
            self.Advance(2);

			return t;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static Int16 ReadInt16(this IReader<byte> self){
            var span = self.span;
            var t = (Int16)(span[0] | (span[1] << 8));
            self.Advance(2);

			return t;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Int32 ReadInt32(this IReader<byte> self) {
			var t = Unsafe.ReadUnaligned<Int32>(ref MemoryMarshal.GetReference(self.span));
			if (!BitConverter.IsLittleEndian) {
				t = BinaryPrimitives.ReverseEndianness(t);
			}
            self.Advance(4);

			return t;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static UInt32 ReadUInt32(this IReader<byte> self) {
			var t = Unsafe.ReadUnaligned<UInt32>(ref MemoryMarshal.GetReference(self.span));
			if (!BitConverter.IsLittleEndian) {
				t = BinaryPrimitives.ReverseEndianness(t);
			}
            self.Advance(4);

			return t;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Int64 ReadInt64(this IReader<byte> self) {
			var t = Unsafe.ReadUnaligned<Int64>(ref MemoryMarshal.GetReference(self.span));
			if (!BitConverter.IsLittleEndian) {
				t = BinaryPrimitives.ReverseEndianness(t);
			}
            self.Advance(8);

			return t;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static UInt64 ReadUInt64(this IReader<byte> self) {
			var t = Unsafe.ReadUnaligned<UInt64>(ref MemoryMarshal.GetReference(self.span));
			if (!BitConverter.IsLittleEndian) {
				t = BinaryPrimitives.ReverseEndianness(t);
			}
            self.Advance(8);

			return t;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe float ReadFloat(this IReader<byte> self) {
            var t = self.ReadInt32();
			return *(float*) &t;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe double ReadDouble(this IReader<byte> self) {
            var t = self.ReadInt64();
			return *(double*) &t;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static uint ReadVarUInt32(this IReader<byte> self) {
            uint value = 0;
			for(var shift = 0; shift < 32; shift += 7){
				var t = self.Read();
				value |= (uint)(t & 0b01111111) << shift;
				if ((t & 0b10000000) == 0) {
					break;
				}
			}
			return value;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static int ReadVarInt32(this IReader<byte> self) => ZigZagUtils.DecodeZigZag32(self.ReadVarUInt32());

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static ulong ReadVarUInt64(this IReader<byte> self) {
            ulong value = 0;
			for(var shift = 0; shift < 64; shift += 7){
				var t = self.Read();
				value |= (ulong)(t & 0b01111111) << shift;
				if ((t & 0b10000000) == 0) {
					break;
				}
			}
			return value;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static long ReadVarInt64(this IReader<byte> self) => ZigZagUtils.DecodeZigZag64(self.ReadVarUInt64());

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static string ReadUtf8(this IReader<byte> self, int len) {
            if (len == 0) return string.Empty;
            if (len > self.readableCount) throw new("error in ReadUtf8 => read data overflow");

            var t = System.Text.Encoding.UTF8.GetString(self.GetSpan(len));
            self.Advance(len);
            return t;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static string ReadUtf8(this IReader<byte> self) => self.ReadUtf8(self.ReadUInt16());

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static string ReadUtf8ToEnd(this IReader<byte> self) {
			var len = self.readableCount;
            if (len == 0) return string.Empty;

            var t = System.Text.Encoding.UTF8.GetString(self.GetSpan(len));
            self.Advance(len);
            return t;
        }
    }
}